/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

/* This will cause tests to wait for a remote debugger attached on port 5005
* Eclipse: 
* 1. Go to Debug Configurations
* 2. Make a new Remote Java Application
* 3. Set Host to localhost and Port to 5005
* 4. Enable "Allow termination of remote VM"
* 5. Switch to Source tab
* 6. Click Add button
* 7. Select File System Directory 
* 8. Browse for the folder with all the source files
* 9. Save all changes
* 10. Set breakpoints
* 11. Run gradle build or gradle test to initiate tests
* 12. Gradle will pause til a connection is recieved
* 13. Run your Remote Java Application
* 14. Enjoy Debugging!
*//*
test {
	debug true
}*/